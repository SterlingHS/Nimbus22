// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.RobotMap;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.CounterBase;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */
public class Shooter extends SubsystemBase 
{
    
    private WPI_TalonSRX shooterTopMotor;
    private WPI_TalonSRX shooterBottomMotor;
    private MotorControllerGroup shooterMotor;
    private final Encoder m_encoder;

    /**
    *
    */
    public Shooter() 
    {
        shooterTopMotor = new WPI_TalonSRX(RobotMap.SHOOTER_TOP_TALON_ID);
        shooterBottomMotor = new WPI_TalonSRX(RobotMap.SHOOTER_BOTTOM_TALON_ID);
        shooterMotor = new MotorControllerGroup(shooterTopMotor,shooterBottomMotor);
        m_encoder = new Encoder(RobotMap.ShooterEncoderChannel1, RobotMap.ShooterEncoderChannel2,true, CounterBase.EncodingType.k4X);
        m_encoder.setSamplesToAverage(10);
    }

    @Override
    public void periodic() 
    {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() 
    {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void shootCargo()
    {
        shooterMotor.set(RobotMap.SHOOT_CARGO_SPEED);
    }

    public void shootCargoStop()
    {
        shooterMotor.stopMotor();
    }
    
    public void shootBallCargoIn ()
    {
        shooterMotor.set(RobotMap.REVERSE_CARGO_SPEED);
    }    
    
    public void shootCargo_to_speed(double target_speed)
    {
        /* Reads speed sensor and sets speed to motor */
        shooterMotor.set(RobotMap.SHOOT_CARGO_SPEED);
    }

    public double read_speed_shooter()
    {   
        double speed = m_encoder.getRate();
        return speed;
    }

}

