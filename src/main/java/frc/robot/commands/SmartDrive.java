// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveSystem;
import frc.robot.subsystems.Index;
import frc.robot.subsystems.Intake;
import frc.robot.subsystems.Pixie;
import frc.robot.subsystems.Shooter;


/**
 *
 */
    public class SmartDrive extends CommandBase {

    private final Shooter m_shooter;
 
    public SmartDrive(Shooter sub1, Pixie sub2, DriveSystem sub3, Intake sub4, Index sub5) {
        m_drive = sub3;
        m_pixie = sub2;
        m_intake = sub4;
        m_index = sub5;
        m_shooter = sub1;
        addRequirements(m_drive);
        addRequirements(m_pixie);
        addRequirements(m_intake);
        addRequirements(m_index);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        if m_pixie.Read_Pixy_is_Ball() == false {
            m_drive.turnRight();
        }
        else{
            int x = m_pixie.Read_Pixy_x();
            int y = m_pixes.Read_Pixy_y();

            // If the ball is in sight then go forward
            if x < 20 && x > -20{
               m_drive.forward();
             // m_intake.intake_down() // The shoulder might already be down
                m_intake.cargointake();
                m_index.cargo_index_in();
            }
            else {
                if x <= 20 {
                    m_drive.turnleft();
                }
                else {
                    m_drive.turnRight();
                }
            }//Fix this later
            
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drive.stopMotor();
        m_index.index_stop();
        m_intake.cargointake_stop();
        m_intake.shoulder_stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;

    }
}
